import pandas as pd

df = pd.read_csv('cancer_data.csv')
# df = pd.read_csv('cancer_data.csv', sep=';')

df.head()

# this returns a tuple of the dimensions of the dataframe
df.shape

# this returns the datatypes of the columns
df.dtypes

# although the datatype for diagnosis appears to be object, further
# investigation shows it's a string
type(df['diagnosis'][0])

# this displays a concise summary of the dataframe,
# including the number of non-null values in each column
df.info()

# this returns the number of unique values in each column
df.nunique()

# this returns useful descriptive statistics for each column of data (e.g. mean, std, count)
df.describe()
df.describe()['pH']

df.head(2)
df.tail(3)

# View the index number and label for each column
for i, v in enumerate(df.columns):
    print(i, v)

# select all the columns from 'id' to the last mean column
df_means = df.loc[:,'id':'fractal_dimension_mean']
df_means.head()

# repeat the step above using index numbers
df_means = df.iloc[:,:11]
df_means.head()

df_means.to_csv('cancer_data_means.csv', index=False)


df["weight"].mean()

# 75th percentile of hours-per-week
df["hours-per-week"].quantile(.75)


import numpy as np

se_cols = np.r_[0:2, 12:22]
#print(se_cols)
df_se = df.iloc[:,se_cols]
df_se.head()

*** CLEANING ***

# fill in missing data w/ mean of column
mean = df["duration"].mean()
df["duration"].fillna(mean, inplace=True)

# find duplicates
df.duplicated()
# count them
sum(df.duplicated())

# removing duplicates (entire row is duplicated)
df.drop_duplicates(inplace=True)


# convert str to datetime
df["ts"] = pd.to_datetime(df["ts"])


# remove "_mean" from column names
new_labels = []
for col in df.columns:
    if '_mean' in col:
        new_labels.append(col[:-5])  # exclude last 6 characters
    else:
        new_labels.append(col)

# assign new labels to columns in dataframe
df.columns = new_labels

*** PLOTTING ***

import pandas as pd
% matplotlib inline

df = pd.read_csv('census.csv')
df.info()

# show array and various hists
df.hist()

# resize and hide array
df.hist(figsize=(8,8));

# show particular hist
df['age'].hist();
df['age'].plot(kind='hist');

# get counts of unique values
df['education'].value_counts()

# plot it to bar chart
df['education'].value_counts().plot(kind='bar');

# plot it to pie chart
df['workclass'].value_counts().plot(kind='pie', figsize=(8,8));

df = pd.read_csv('cancer.csv')

# get overview of scatters
pd.plotting.scatter_matrix(df, figsize=(15,15));

# show scatter
df.plot(x='compactness', y='concavity', kind='scatter');

# show box
df['concave_points'].plot(kind='box');


*** SUMMARY STATS ***

# create new data frames using masks
df_m = df[df["diagnosis"] == "M"]
df_m.head()

# see summary stats about area feature
df_m['area'].describe()

# create 1 chart comparing 2 means
import matplotlib.pyplot as plt
% matplotlib inline

fig, ax = plt.subplots(figsize=(8, 6))
ax.hist(df_b['area'], alpha=0.5, label='benign')
ax.hist(df_m['area'], alpha=0.5, label='malignant')
ax.set_title('distributions of benign and malignant tumor areas')
ax.set_xlabel('Area')
ax.set_ylabel('Count')
ax.legend(loc='upper right')
plt.show()


*** EXAMPLES ***

# from Lesson 3: The Data Analysis Process / 24. Drawing Conclusions Quiz

# for some store sales data, show total sales from last month.
# stores are storeA -> storeE
# "week" looks like 2014-05-04

from datetime import datetime, timedelta
# total sales for the last month
max_week = max(df["week"])
#print(max_week)
d = datetime.strptime(max_week, '%Y-%m-%d')
dstart = d - timedelta(weeks=4)
start_month_of_max_week = dstart.strftime('%Y-%m-%d')
#print(start_month_of_max_week)

df_max = df[(df['week'] > start_month_of_max_week) & (df['week'] <= max_week)]
#df_max.head()

df_max_stores_summed = df_max.loc[:,'storeA':'storeE'].sum()
print("total sales for last month: {}".format(sum(df_max_stores_summed)))
print(df_max_stores_summed)


# average sales
# (is this the average of all sales per month, across stores?)
df_all_stores_summed = df.loc[:,'storeA':'storeE'].sum()
row_count = df.shape[0]
sum(df_all_stores_summed/row_count)

# no, it means Which store makes the most sales on average?
df_each_store_summed = df.loc[:,'storeA':'storeE'].mean()
print(df_each_store_summed)


# sales on march 13, 2016
# Which store sells the most during the week of March 13th, 2016?

df_target_week = df[(df['week'] == '2016-03-13')]
df_target_week.head()

# worst week for store C
#df_store_c = df.loc[:,'storeC':'storeC']
df_store_c = df[['week','storeC']]
#df_store_c.head()
df_store_c.loc[df['storeC'].idxmin()]

# total sales during most recent 3 month period
dstart_3mo = d - timedelta(weeks=3*4)
dstart_3mo_week = dstart_3mo.strftime('%Y-%m-%d')
#print(dstart_3mo_week)

df_3mo = df[(df['week'] > dstart_3mo_week) & (df['week'] <= max_week)]
#df_3mo.head()
df_3mo_summed = df_3mo.loc[:,'storeA':'storeE'].sum()
df_3mo_summed

*** MORE VISUALIZATIONS (including indices) ***

import pandas as pd
% matplotlib inline

df_census = pd.read_csv('census_income_data.csv')

df_a = df_census[df_census['income'] == '>50K']
df_b = df_census[df_census['income'] == '<=50K']

ind = df_a['education'].value_count().index

df_a['education'].value_counts()[ind].plot(kind='bar');
df_b['education'].value_counts()[ind].plot(kind='bar');

ind = df_a['workclass'].value_counts().index
df_a['work class'].value_counts()[ind].plot(kind='pie', figsize=(8,8));

df_a['age'].hist();
df_b['age'].hist();

df_a['age'].describe()
df_b['age'].describe()

*** # from Lesson 3: The Data Analysis Process / 27. Communicating Results Practice
*** 

# imports and load data
import pandas as pd
% matplotlib inline

df = pd.read_csv('store_data.csv')

df.head()

# explore data
df.shape

# sales for the last month
# Which store has the highest total sales for the last month?
# c.f. https://stackoverflow.com/questions/32105817/plot-entire-row-on-pandas/32105953#32105953

from datetime import datetime, timedelta
max_week = max(df["week"])

d = datetime.strptime(max_week, '%Y-%m-%d')
dstart = d - timedelta(weeks=4)
start_month_of_max_week = dstart.strftime('%Y-%m-%d')

df_last_mo = df[(df['week'] > start_month_of_max_week) & (df['week'] <= max_week)]
df_last_mo_summed = df_last_mo[:,'storeA':'storeE'].sum()

df_last_mo_summed.plot(kind='bar');


# average sales
# Which store makes the most sales on average?
df_each_store_summed = df.loc[:,'storeA':'storeE'].mean()
df_each_store_summed.plot(kind='bar');


# sales for the week of March 13th, 2016
# Which store sells the most during the week of March 13th, 2016?
df_target_week = df[(df['week'] == '2016-03-13')]
df_target_week

df_target_week_stores = df_target_week.loc[:,'storeA':'storeE']
# plot default bar, but x-axis shows index :-(
df_target_week_stores.plot(kind='bar');

# ok can convert it to a series and plot that

df_target_week_stores_series = df_target_week_stores.squeeze()
df_target_week_stores_series.plot(kind='bar');


*** GROUP BY ***

# show all means for a each quality
df.groupby('quality').mean()

# show all means for each quality and color
df.groupby(['quality', 'color']).mean()

# ensure neither quality or color are index (unsure what this means)
df.groupby(['quality', 'color'], as_index=False).mean()

# only show pH column
df.groupby(['quality', 'color'], as_index=False)['pH'].mean()


*** QUERY ***

# selecting malignant records in cancer data
df_m = df[df['diagnosis'] == 'M']
df_m = df.query('diagnosis == "M"')

# selecting records of people making over $50K
df_a = df[df['income'] == ' >50K']
df_a = df.query('income == " >50K"')

# query returns a dataframe


*** PLOTTING WITH GROUP BY ***

# here, white bar disappears into white background
colors = ['red', 'white']
df.groupby('color')['quality'].mean().plot(kind='bar', title='foo', color=colors, alpha=.7)

# improve it
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
% matplotlib inline

colors = ['red', 'white']
color_means = df.groupby('color')['quality'].mean()
color_means.plot(kind='bar', title='foo', color=colors, alpha=.7)

plt.xlabel('Colors', fontsize=18)
plt.ylabel('Quality', fontsize=18)

# more detail, though ultimately there are issues with the x-label and missing red values. solution is to move to matplotlib for more control.

# counts for all columns are the same, so picking arbitrary one
counts = df.groupby(['quality', 'color']).count()['pH']
totals = df.groupby(['color']).count()['pH']

proportions = counts/totals

proportions.plot(kind='bar', title='foo', color=colors, alpha=..7)
plt.xlabel('Quality and Color', fontsize=18)
plt.ylabel('Proportion', fontsize=18)









