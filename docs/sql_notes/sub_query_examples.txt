First, we needed to group by the day and channel. Then ordering by the number of events (the third column) gave us a quick way to answer the first question.

SELECT DATE_TRUNC('day',occurred_at) AS day,
   channel, COUNT(*) as events
FROM web_events
GROUP BY 1,2
ORDER BY 3 DESC;




Here you can see that to get the entire original table was provided back. The additional portions of the query include an *, and we also needed to alias our table. Also the table was provided in the SELECT statement, not the FROM.

SELECT *
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
           channel, COUNT(*) as events
     FROM web_events 
     GROUP BY 1,2
     ORDER BY 3 DESC) sub;





Finally, here we are able to get a table that shows the average number of events a day for each channel.

SELECT channel, AVG(events) AS average_events
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
             channel, COUNT(*) as events
      FROM web_events 
      GROUP BY 1,2) sub
GROUP BY channel
ORDER BY 2 DESC;



my quiz answer:

select AVG(standard_qty) as std_qty, AVG(gloss_qty) as gloss_qty, AVG(poster_qty) as poster_qty, SUM(standard_amt_usd) + SUM(gloss_amt_usd) + SUM(poster_amt_usd) as total
from orders o
where DATE_TRUNC('month', o.occurred_at) = 
  (select DATE_TRUNC('month', occurred_at) from orders
  order by occurred_at asc
  limit 1)

their answer:

SELECT AVG(standard_qty) avg_std, AVG(gloss_qty) avg_gls, AVG(poster_qty) avg_pst
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = 
     (SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);

SELECT SUM(total_amt_usd)
FROM orders
WHERE DATE_TRUNC('month', occurred_at) = 
      (SELECT DATE_TRUNC('month', MIN(occurred_at)) FROM orders);

